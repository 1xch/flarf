Flask request filter

Flarf allows you to filter flask request to your specification.

Simplest example: 

    from flask import Flask
    from flask.ext.flarf import Flarf, FlarFilter

    filter1 = FlarfFilter(filter_tag='filter1',
                          filter_params=['headers',],
                          filter_on=['includeme'])

   app = Flask(__name__)
   Flarf(app, filters=[filter1])

   @app.route("/includeme")
   def index():
       return render_template("index.html")

   index.html:
   request headers: {{g.filter1.headers}}

Ok, so you can already do this without using Flarf by getting {{request.headers}}.

But suppose you wanted the header returned in ALL CAPITAL LETTERS?

    def path_upper(request):
        return request.header.upper()

    filter2 = FlarfFilter(filter_tag='filter2',
                          filter_params=[path_upper],
                          filter_on=['includeme'])

   app = Flask(__name__)
   Flarf(app, filters=[filter2])

   @app.route("/includeme")
   def index():
       return render_template("index.html")

   index.html:
   UPPERCASE REQUEST HEADERS: {{g.filter2.path_upper}}

Basic examples are rather basic, but perhaps you can begin to see the uses: any
time you need something specific for your views/templates you can filter it from 
incoming request and have it readily available without having to prep the info
need on a per-view/per-template basis.
